
import numpy as np

#######################################
def geoPoly(type=None):
    arr=[]
    if type=='continental' or type is None:
        arr.append([[-117.22412109375,32.29641979896909],
                [-115.224609375,32.287132632616355],
                [-111.15966796875,30.958768570779846],
                [-108.08349609375,31.015278981711266],
                [-107.9296875,31.44741029142872],
                [-106.58935546875,31.466153715024294],
                [-104.765625,29.496987596535767],
                [-103.2275390625,28.806173508854776],
                [-102.65625,29.113775395114416],
                [-102.50244140625,29.554345125748267],
                [-101.6015625,29.554345125748267],
                [-99.42626953125,26.27371402440643],
                [-96.65771484375,25.54244147012483],
                [-96.591796875,27.225325836903373],
                [-93.44970703125,29.132970130878636],
                [-90.52734375,28.66167121641951],
                [-88.231201171875,28.8927788645183],
                [-88.165283203125,29.726222319395504],
                [-86.1767578125,29.6880527498568],
                [-85.264892578125,29.132970130878636],
                [-84.0673828125,29.334298230315675],
                [-83.47412109375,28.603814407841323],
                [-83.5400390625,27.926474039865017],
                [-82.3974609375,24.116674961751293],
                [-80.474853515625,24.367113562651276],
                [-79.62890625,25.19500042430748],
                [-79.43115234375,26.33280692289788],
                [-79.771728515625,29.248063243796576],
                [-80.189208984375,30.372875188118016],
                [-80.2001953125,31.690781806136822],
                [-74.794921875,34.92197103616377],
                [-74.59716796875,37.317751851636906],
                [-73.223876953125,39.9602803542957],
                [-69.49951171875,41.13729606112276],
                [-69.43359375,42.122673151172584],
                [-69.8291015625,43.03677585761058],
                [-66.192626953125,43.82660134505384],
                [-66.42333984375,45.359865333959746],
                [-67.379150390625,46.126556302418514],
                [-67.467041015625,47.234489635299184],
                [-68.291015625,47.71715357016648],
                [-69.76318359375,47.68018294648414],
                [-71.905517578125,45.42158812329091],
                [-75.113525390625,45.282617057517406],
                [-77.58544921875,44.008620115415354],
                [-79.486083984375,43.78695837311561],
                [-79.661865234375,42.924251753870685],
                [-82.364501953125,42.00848901572399],
                [-82.452392578125,42.26917949243506],
                [-81.71630859375,43.37311218382002],
                [-82.540283203125,45.336701909968106],
                [-83.331298828125,46.702202151643455],
                [-85.242919921875,47.4057852900587],
                [-86.94580078125,47.428087261714275],
                [-87.64892578125,48.40003249610685],
                [-91.175537109375,48.698212165626366],
                [-93.944091796875,48.980216985374994],
                [-94.5263671875,49.745781306155735],
                [-95.73486328125,49.63917719651036],
                [-95.69091796875,49.13859653703879],
                [-123.59619140625,49.13859653703879],
                [-123.486328125,48.494767515307295],
                [-125.09033203125,48.719961222646276],
                [-125.123291015625,47.55428670127958],
                [-124.69482421875,45.49094569262732],
                [-125.343017578125,42.76314586689494],
                [-125.00244140625,40.204050425113294],
                [-124.200439453125,38.436379603],
                [-123.15673828125,36.98500309285596],
                [-121.717529296875,33.86129311351553],
                [-120.267333984375,32.79651010951669],
                [-118.355712890625,32.46342595776104],
                [-117.22412109375,32.29641979896909]])
    if type=='hawaii' or type is None:
        minLat, maxLat = 18.05, 22.95
        minLng, maxLng = -160.95, -154.15
        arr.append([[minLng,minLat],[maxLng,minLat],[maxLng,maxLat],[minLng,maxLat],[minLng,minLat]])
    return arr
#######################################

#######################################
def cartesian(arrays, out=None):

    """
    Generate a cartesian product of input arrays.

    Parameters
    ----------
    arrays : list of array-like
        1-D arrays to form the cartesian product of.
    out : ndarray
        Array to place the cartesian product in.

    Returns
    -------
    out : ndarray
        2-D array of shape (M, len(arrays)) containing cartesian products
        formed of input arrays.

    Examples
    --------
    >>> cartesian(([1, 2, 3], [4, 5], [6, 7]))
    array([[1, 4, 6],
           [1, 4, 7],
           [1, 5, 6],
           [1, 5, 7],
           [2, 4, 6],
           [2, 4, 7],
           [2, 5, 6],
           [2, 5, 7],
           [3, 4, 6],
           [3, 4, 7],
           [3, 5, 6],
           [3, 5, 7]])

    source: http://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays
    """

    arrays = [np.asarray(x) for x in arrays]
    dtype = arrays[0].dtype

    n = np.prod([x.size for x in arrays])
    if out is None:
        out = np.zeros([n, len(arrays)], dtype=dtype)

    m = n / arrays[0].size
    out[:,0] = np.repeat(arrays[0], m)
    if arrays[1:]:
        cartesian(arrays[1:], out=out[0:m,1:])
        for j in xrange(1, arrays[0].size):
            out[j*m:(j+1)*m,1:] = out[0:m,1:]
    return out

